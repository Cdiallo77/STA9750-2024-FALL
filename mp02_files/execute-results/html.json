{
  "hash": "b0601f075371c3d13e23575745750e08",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Mini-Project 2: The Business of Show Business \"\nauthor: Cheick Amed Diallo\n---\n\n\n\n![](Show.jpeg){fig-align=\"center\" width=\"618\"}\n\n\\[from EDGE MEDIA NETWORK.\\]\n\n## Introduction\n\nWelcome to Mini-Project #02. In this project, you will play the role of a Hollywood development executive; that is, you are the executive in charge of coming up with new movie ideas. Historically, development executives would source the “life rights” necessary to make “based on a true story” movies, would secure production options on promising new novels, and would partner with owners of established intellectual property (IP) to develop movie adaptations. Recently, however, the development process has been criticized by Hollywood insiders and audiences alike for over-reliance on rote sequels. Our goal is to develop a set of data-driven ideas for new movies. Before doing so, however, we will dive into Hollywood history to identify key characteristics of successful movies, to identify successful filmmakers and actors, and to examine some of Hollywood’s most famous flops.\n\n## Data\n\nThe following code will automatically download and load these files into R.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(warn = -1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\n\n\nget_imdb_file <- function(fname){\n    BASE_URL <- \"https://datasets.imdbws.com/\"\n    fname_ext <- paste0(fname, \".tsv.gz\")\n    if(!file.exists(fname_ext)){\n        FILE_URL <- paste0(BASE_URL, fname_ext)\n        download.file(FILE_URL, destfile = fname_ext)\n    }\n    suppressWarnings({\n        as.data.frame(readr::read_tsv(fname_ext, lazy=FALSE, show_col_types = FALSE))\n    })\n}\n\nNAME_BASICS <- get_imdb_file(\"name.basics\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\n\nTITLE_BASICS     <- get_imdb_file(\"title.basics\")\n\nTITLE_EPISODES   <- get_imdb_file(\"title.episode\")\n\nTITLE_RATINGS    <- get_imdb_file(\"title.ratings\")\n\nTITLE_CREW       <- get_imdb_file(\"title.crew\")\n\nTITLE_PRINCIPALS <- get_imdb_file(\"title.principals\")\n```\n:::\n\n\n\nDown-selecting to get to a data set that we can analyze fluidly\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(repos = \"https://cran.rstudio.com/\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\n\ninstall.packages(\"dplyr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\t/var/folders/1x/xh1js_qd3nbgdtgpbmsg38rw0000gn/T//Rtmp5324ww/downloaded_packages\n```\n\n\n:::\n\n```{.r .cell-code}\ninstall.packages(\"stringr\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nThe downloaded binary packages are in\n\t/var/folders/1x/xh1js_qd3nbgdtgpbmsg38rw0000gn/T//Rtmp5324ww/downloaded_packages\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'dplyr'\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(stringr)\nlibrary(ggplot2)\nNAME_BASICS <- NAME_BASICS |> \n  filter(str_count(knownForTitles, \",\") > 1)\n```\n:::\n\n\n\nShowing what the graph looks like\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS |>\n  ggplot(aes(x=numVotes)) + \n  geom_histogram(bins=30) +\n  xlab(\"Number of IMDB Ratings\") + \n  ylab(\"Number of Titles\") + \n  ggtitle(\"Majority of IMDB Titles Have Less than 100 Ratings\") + \n  theme_bw() + \n  scale_x_log10(label=scales::comma) + \n  scale_y_continuous(label=scales::comma)\n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nlet’s throw out any title with less than 100 ratings\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS |>\n  pull(numVotes) |>\n  quantile()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     0%     25%     50%     75%    100% \n      5      11      26     101 2952383 \n```\n\n\n:::\n:::\n\n\n\nLet's reduce the size of our data set\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS <- TITLE_RATINGS |>\n  filter(numVotes >= 100)\n```\n:::\n\n\n\nLet's perform the same filtering on our other TITLE\\_\\* tables\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_BASICS <- TITLE_BASICS |>\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\n\nTITLE_CREW <- TITLE_CREW |>\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\n\nTITLE_EPISODES_1 <- TITLE_EPISODES |>\n  semi_join(TITLE_RATINGS, \n            join_by(tconst == tconst))\nTITLE_EPISODES_2 <- TITLE_EPISODES |>\n  semi_join(TITLE_RATINGS, \n            join_by(parentTconst == tconst))\n\nTITLE_EPISODES <- bind_rows(TITLE_EPISODES_1,\n                            TITLE_EPISODES_2) |>\n  distinct()\n\nTITLE_PRINCIPALS <- TITLE_PRINCIPALS |>\n  semi_join(TITLE_RATINGS, join_by(tconst == tconst))\n\n\nrm(TITLE_EPISODES_1)\nrm(TITLE_EPISODES_2)\n```\n:::\n\n\n\nAt this point, we’ve filtered down our data significantly and are ready to begin analysis in earnest. Initial Exploration, At this point, let’s start examining our data more closely. We can clean the NAMES_BASIC command as follows:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\nNAME_BASICS <- NAME_BASICS |>\n  mutate(birthYear = as.numeric(birthYear),\n         deathYear = as.numeric(deathYear))\n```\n:::\n\n\n\n## TASK 1: Correct the types of the columns\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\nTITLE_BASICS <- TITLE_BASICS |>\n  mutate(startYear = as.numeric(startYear),\n         endYear = as.numeric(endYear),\n         isAdult = as.logical(isAdult))\n```\n:::\n\n\n\n#### TITLE_RATINGS: Correcting averageRating and numVotes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\nTITLE_RATINGS <- TITLE_RATINGS |>\n  mutate(averageRating = as.numeric(averageRating),\n         numVotes = as.numeric(numVotes))\n```\n:::\n\n\n\n#### TITLE_EPISODES: Correcting seasonNumber and episodeNumber\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\nTITLE_EPISODES <- TITLE_EPISODES |>\n  mutate(seasonNumber = as.numeric(seasonNumber),\n         episodeNumber = as.numeric(episodeNumber))\n```\n:::\n\n\n\n#### TITLE_PRINCIPALS: Correcting Category and job\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\nTITLE_PRINCIPALS <- TITLE_PRINCIPALS |>\n  mutate(category = as.factor(category),\n         job = as.character(job))\n```\n:::\n\n\n\nA quick glance at the structure of your dataset, showing the column types and some sample values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(NAME_BASICS)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 1,347,460\nColumns: 6\n$ nconst            <chr> \"nm0000001\", \"nm0000002\", \"nm0000003\", \"nm0000004\", …\n$ primaryName       <chr> \"Fred Astaire\", \"Lauren Bacall\", \"Brigitte Bardot\", …\n$ birthYear         <dbl> 1899, 1924, 1934, 1949, 1918, 1915, 1899, 1924, 1925…\n$ deathYear         <dbl> 1987, 2014, NA, 1982, 2007, 1982, 1957, 2004, 1984, …\n$ primaryProfession <chr> \"actor,miscellaneous,producer\", \"actress,soundtrack,…\n$ knownForTitles    <chr> \"tt0072308,tt0050419,tt0053137,tt0027125\", \"tt003738…\n```\n\n\n:::\n:::\n\n\n\n## TASK 2: Instructor-Provided Questions\n\n#### Question 1: How many movies are in our data set? How many TV series? How many TV episodes?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nCategories <- TITLE_BASICS |>\n  filter(titleType %in% c(\"movie\", \"tvSeries\", \"tvEpisode\")) |>\n  group_by(titleType) |>\n  summarise(count = n())\n\nprint(Categories)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  titleType  count\n  <chr>      <int>\n1 movie     105549\n2 tvEpisode 112156\n3 tvSeries   22074\n```\n\n\n:::\n:::\n\n\n\nThe summary shows that we have **105,549 movies** in this dataset; **112,156 Tv Episodes** and **22,074 Tv Series**.\n\n#### Question 2: Who is the oldest living person in our data set?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noldest_living_person <- NAME_BASICS |>\n  filter(is.na(deathYear)) |>\n  filter(!is.na(birthYear)) |>\n  arrange(birthYear) |>\n  slice(1)\n\nprint(oldest_living_person)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     nconst    primaryName birthYear deathYear primaryProfession\n1 nm1441282 Richard Dybeck      1811        NA        soundtrack\n                           knownForTitles\n1 tt0021783,tt0022126,tt0036372,tt0037562\n```\n\n\n:::\n:::\n\n\n\nThe data shows that **Richard Dybeck** is the oldest person from the our dataset. However, after researching online, this does not seems accurate; therefore, by tweeking the code we have other findings.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\noldest <- NAME_BASICS |>\n  filter(birthYear > 1923, is.na(deathYear))|> \n  arrange (birthYear) |>\n  slice_head(n=10)\nprint (oldest)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n      nconst              primaryName birthYear deathYear\n1  nm0001693          Eva Marie Saint      1924        NA\n2  nm0011140                Lee Adams      1924        NA\n3  nm0021786         Humberto Almazán      1924        NA\n4  nm0073561        Yuriy Berenshteyn      1924        NA\n5  nm0080310 Harsukh Jagneshwar Bhatt      1924        NA\n6  nm0084762          Bo Bjelfvenstam      1924        NA\n7  nm0097155            Carola Bornée      1924        NA\n8  nm0106849            Pietro Bregni      1924        NA\n9  nm0121557             Michael Burk      1924        NA\n10 nm0130807          Hillevi Calvert      1924        NA\n                      primaryProfession\n1           actress,producer,soundtrack\n2  music_department,actor,miscellaneous\n3                                 actor\n4                       cinematographer\n5  director,assistant_director,producer\n6              director,writer,producer\n7                              producer\n8                              producer\n9                 actor,writer,director\n10                    script_department\n                               knownForTitles\n1     tt0047296,tt0053125,tt0348150,tt1837709\n2     tt0423977,tt0112605,tt6294822,tt0131369\n3     tt0050144,tt0249863,tt0223581,tt0244475\n4               tt0057509,tt8157292,tt9066040\n5     tt0156724,tt0156556,tt0156995,tt0156718\n6  tt26241720,tt32591822,tt14358988,tt7075484\n7    tt4493588,tt0051094,tt10250868,tt0048404\n8     tt0141673,tt0094787,tt0101493,tt0075845\n9     tt0312036,tt0054327,tt0048565,tt0048402\n10    tt0039315,tt0038385,tt0036884,tt0037544\n```\n\n\n:::\n:::\n\n\n\nWe now know that **Eva Marie Saint** is the oldest living movie star - matching our online finding.\n\n#### Question 3-a: There is one TV Episode in this data set with a perfect 10/10 rating and at least 200,000 IMDb ratings.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nperfect_rating <- TITLE_RATINGS |>\n  filter(averageRating == 10, numVotes >= 200000) |>\n  inner_join(TITLE_EPISODES, by = \"tconst\") |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>  \n  select(tconst, primaryTitle, parentTconst)  \nprint(perfect_rating)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tconst primaryTitle parentTconst\n1 tt2301451   Ozymandias    tt0903747\n```\n\n\n:::\n:::\n\n\n\n#### Question 3-b: What is it?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseries <- TITLE_BASICS |>\n  filter(tconst %in% perfect_rating$parentTconst) |>\n  select(tconst, primaryTitle)\nprint(series)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tconst primaryTitle\n1 tt0903747 Breaking Bad\n```\n\n\n:::\n:::\n\n\n\n**Ozymandias** had the perfect rating from **Breaking Bad**\n\n#### Question 4: What four projects is the actor Mark Hamill most known for?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmark_hamill <- NAME_BASICS |>\n  filter(primaryName == \"Mark Hamill\") |>\n  select(nconst, knownForTitles)\nknown_titles <- strsplit(mark_hamill$knownForTitles, \",\")[[1]]\nmark_hamill_4projects <- TITLE_BASICS |>\n  filter(tconst %in% known_titles)\nprint(mark_hamill_4projects)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     tconst titleType                                   primaryTitle\n1 tt0076759     movie             Star Wars: Episode IV - A New Hope\n2 tt0080684     movie Star Wars: Episode V - The Empire Strikes Back\n3 tt0086190     movie     Star Wars: Episode VI - Return of the Jedi\n4 tt2527336     movie        Star Wars: Episode VIII - The Last Jedi\n                                   originalTitle isAdult startYear endYear\n1                                      Star Wars   FALSE      1977      NA\n2 Star Wars: Episode V - The Empire Strikes Back   FALSE      1980      NA\n3     Star Wars: Episode VI - Return of the Jedi   FALSE      1983      NA\n4        Star Wars: Episode VIII - The Last Jedi   FALSE      2017      NA\n  runtimeMinutes                   genres\n1            121 Action,Adventure,Fantasy\n2            124 Action,Adventure,Fantasy\n3            131 Action,Adventure,Fantasy\n4            152 Action,Adventure,Fantasy\n```\n\n\n:::\n:::\n\n\n\n**Mark Hamill** played in Star Wars Episode 4,5,6 and 8.\n\n#### Question 5: The TV series with \\> 12 Episodes with the highest average ratings.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhighest_rated_series <- TITLE_EPISODES |>\n  group_by(parentTconst) |>\n  summarise(numEpisodes = n()) |>\n  filter(numEpisodes > 12) |>\n  inner_join(TITLE_RATINGS, by = c(\"parentTconst\" = \"tconst\")) |>\n  group_by(parentTconst) |>\n  summarise(averageRating = mean(averageRating, na.rm = TRUE), numEpisodes = first(numEpisodes)) |>\n  arrange(desc(averageRating)) |>\n  inner_join(TITLE_BASICS, by = c(\"parentTconst\" = \"tconst\")) |>\n  slice(1) |>\n  select(primaryTitle, averageRating, numEpisodes)\nprint(highest_rated_series)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 3\n  primaryTitle averageRating numEpisodes\n  <chr>                <dbl>       <int>\n1 Craft Games            9.7         318\n```\n\n\n:::\n:::\n\n\n\n**Craft Games** has the highest average rating.\n\n#### Question 6: Is it true that episodes from later seasons of \"*Happy Days*\" have lower average ratings than the early seasons?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhappy_days_season_ratings <- TITLE_EPISODES |>\n  filter(parentTconst == (TITLE_BASICS |>\n                            filter(primaryTitle == \"Happy Days\", startYear == \"1974\") |>\n                            pull(tconst))) |>\n  inner_join(TITLE_RATINGS, by = \"tconst\") |>\n  group_by(seasonNumber) |>\n  summarise(averageSeasonRating = mean(averageRating, na.rm = TRUE))\n\nprint(happy_days_season_ratings)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 × 2\n   seasonNumber averageSeasonRating\n          <dbl>               <dbl>\n 1            1                7.58\n 2            2                7.69\n 3            3                7.7 \n 4            4                7.43\n 5            5                7   \n 6            6                7.02\n 7            7                6.33\n 8            8                5.3 \n 9            9                6.4 \n10           10                6.7 \n11           11                7.33\n```\n\n\n:::\n:::\n\n\n\nYes, the common idiom *“jump the shark”* is accurate in this case because the ratings have been down since the 5 season.\n\n## Task 3: Custom success metric\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS <- TITLE_RATINGS |>\n  mutate(success_score = 0.7 * averageRating + 0.3 * log10(numVotes))\ntop_movies <- TITLE_RATINGS |>\n  arrange(desc(success_score)) |>\n  slice(1:10) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  filter(titleType == \"movie\") |>\n  select(primaryTitle, success_score, averageRating, numVotes)\n\nprint(top_movies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              primaryTitle success_score averageRating numVotes\n1 The Shawshank Redemption      8.451052           9.3  2952383\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npoor_movies <- TITLE_RATINGS |>\n  filter(numVotes > 100000) |>\n  arrange(success_score) |>\n  slice(1:5) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  select(primaryTitle, success_score, averageRating, numVotes)\n\nprint(poor_movies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       primaryTitle success_score averageRating numVotes\n1             Radhe      2.906755           1.9   180239\n2        Epic Movie      3.192795           2.4   110319\n3         Adipurush      3.428501           2.7   134381\n4 Meet the Spartans      3.475139           2.8   112322\n5          365 Days      3.811163           3.3   100897\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmark_hamill_known <- NAME_BASICS |>\n  filter(primaryName == \"Mark Hamill\") |>\n  pull(knownForTitles) |>\n  str_split(\",\") |>\n  unlist()\n\nmark_hamill_projects <- TITLE_BASICS |>\n  filter(tconst %in% mark_hamill_known) |>\n  inner_join(TITLE_RATINGS, by = \"tconst\") |>\n  select(primaryTitle, success_score, averageRating, numVotes)\n\nprint(mark_hamill_projects)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                    primaryTitle success_score averageRating\n1             Star Wars: Episode IV - A New Hope      7.870599           8.6\n2 Star Wars: Episode V - The Empire Strikes Back      7.934366           8.7\n3     Star Wars: Episode VI - Return of the Jedi      7.627098           8.3\n4        Star Wars: Episode VIII - The Last Jedi      6.580290           6.9\n  numVotes\n1  1474565\n2  1405682\n3  1140230\n4   682808\n```\n\n\n:::\n:::\n\n\n\n#### Additional spot check (movies with at least 50,000 votes and a high success score)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuccessful_movies <- TITLE_RATINGS |>\n  filter(numVotes > 50000 & success_score > 8) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  select(primaryTitle, success_score, averageRating, numVotes)\n  head(successful_movies,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           primaryTitle success_score averageRating numVotes\n1          12 Angry Men      8.084624           9.0   888680\n2         The Godfather      8.334044           9.2  2058166\n3 The Godfather Part II      8.142983           9.0  1390838\n4      Schindler's List      8.151175           9.0  1481099\n5               Friends      8.043854           8.9  1112196\n```\n\n\n:::\n:::\n\n\n\nA success score \\> 8 might be used as a threshold for determining that a project is a \"solid\" success, balancing both rating and popular awareness.\n\nChoosing top 5-10 movies by success metric:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nTITLE_RATINGS <- TITLE_RATINGS |>\n  mutate(success = averageRating * log10(numVotes + 1))  # Add +1 to avoid log(0)\ntop_movies <- TITLE_RATINGS |>\n  filter(averageRating >= 8, numVotes >= 10000) |>\n  arrange(desc(success)) |>\n  slice(1:10) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  select(primaryTitle, averageRating, numVotes, success)\n```\n:::\n\n\n\nChecking and displaying for low-quality movies with many votes:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlow_quality_movies <- TITLE_RATINGS |>\n  filter(averageRating < 5, numVotes >= 50000) |>\n  arrange(success) |>\n  slice(1:5) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  select(primaryTitle, averageRating, numVotes, success)\nprint(low_quality_movies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                    primaryTitle averageRating numVotes  success\n1                Queen Cleopatra           1.2    86285 5.923128\n2                          Velma           1.6    79373 7.839485\n3 Justin Bieber: Never Say Never           1.7    76466 8.301906\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nnolan_titles <- NAME_BASICS |>\n  filter(primaryName == \"Christopher Nolan\") |>\n  select(knownForTitles) |>\n  pull(knownForTitles) |>\n  str_split(\",\") |>\n  unlist()\n\nnolan_movies <- TITLE_RATINGS |>\n  filter(tconst %in% nolan_titles) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  select(primaryTitle, averageRating, numVotes, success) |>\n  arrange(desc(success))\nprint(nolan_movies)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  primaryTitle averageRating numVotes  success\n1    Inception           8.8  2603621 56.45709\n2 Interstellar           8.7  2175957 55.13756\n3 The Prestige           8.5  1471339 52.42556\n```\n\n\n:::\n:::\n\n\n\nDefining a success threshold (e.g., movies with success score above a certain value are \"solid\")\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreshold <- 6  \nsolid_movies <- TITLE_RATINGS |>\n  filter(success >= threshold) |>\n  inner_join(TITLE_BASICS, by = \"tconst\") |>\n  select(primaryTitle, averageRating, numVotes, success)\n  head(solid_movies,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n            primaryTitle averageRating numVotes  success\n1             Carmencita           5.7     2096 18.93311\n2 Le clown et ses chiens           5.6      283 13.73858\n3           Poor Pierrot           6.5     2104 21.60114\n4            Un bon bock           5.4      183 12.23002\n5       Blacksmith Scene           6.2     2839 21.41057\n```\n\n\n:::\n:::\n\n\n\n## Task 4: Trends in Success Over Time\n\n#### Question 1: What was the genre with the most “successes” in each decade ?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmovies_by_decade <- TITLE_BASICS %>%\n  mutate(startYear = as.numeric(startYear),\n         decade = (startYear %/% 10) * 10) %>%\n  filter(titleType == \"movie\")\n\nmovies_success <- movies_by_decade %>%\n  inner_join(TITLE_RATINGS, by = \"tconst\") %>%\n  mutate(success = averageRating * log10(numVotes + 1))\n\ngenre_success_by_decade <- movies_success %>%\n  group_by(decade, genres) %>%\n  summarise(numSuccesses = sum(success >= 6), .groups = 'drop')\n\ntop_genres_by_decade <- genre_success_by_decade %>%\n  group_by(decade) %>%\n  top_n(5, numSuccesses) %>%\n  ungroup()\n```\n:::\n\n\n\n#### Plot the number of successes by genre in each decade (shows only the top 5) :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#|echo: true\n#|message: false\n#|warning: false\nggplot(top_genres_by_decade, aes(x = decade, y = numSuccesses, fill = genres)) +\n  geom_bar(stat = \"identity\") +  \n  labs(title = \"Top 5 Genre Successes by Decade\",\n       x = \"Decade\",\n       y = \"Number of Successes\",\n       fill = \"Genres\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +  \n  scale_fill_brewer(palette = \"Paired\")  \n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\nComedy and Drama has been a dominant and successive genre troughout the decades.\n\n#### Question 2: What genre consistently has the most “successes” ?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntotal_genre_success <- movies_success %>%\n  group_by(genres) %>%\n  summarise(totalSuccesses = sum(success >= 6), .groups = 'drop')\ntop_genres <- total_genre_success %>%\n  top_n(5, totalSuccesses)\nggplot(top_genres, aes(x = reorder(genres, -totalSuccesses), y = totalSuccesses, fill = genres)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 5 Genres by Total Number of Successes\",\n       x = \"Genre\",\n       y = \"Number of Successes\",\n       fill = \"Genres\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_fill_brewer(palette = \"Paired\") \n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\nThe genre that consistently has the most “successes” is **DRAMA**.\n\n#### Question 3: What genre used to reliably produce “successes” and has fallen out of favor?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntop_genres_overall <- movies_success %>%\n  group_by(genres) %>%\n  summarise(totalSuccesses = sum(success >= 6), .groups = 'drop') %>%\n  top_n(5, totalSuccesses)\nfiltered_genre_success <- genre_success_by_decade %>%\n  filter(genres %in% top_genres_overall$genres)\n```\n:::\n\n\n\n#### Plot of the number of successes by genre across decades :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(filtered_genre_success, aes(x = decade, y = numSuccesses, color = genres, group = genres)) +\n  geom_line(size = 1) + \n  labs(title = \"Top 5 Genre Trends: Successes Over Decades\",\n       x = \"Decade\",\n       y = \"Number of Successes\",\n       color = \"Genres\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_color_brewer(palette = \"Paired\")  \n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n#### What genre has produced the most “successes” since 2010 ?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsuccess_since_2010 <- movies_success %>%\n  filter(startYear >= 2010) %>%\n  group_by(genres) %>%\n  summarise(numSuccesses = sum(success >= 6), totalMovies = n(), .groups = 'drop')\ntop_genres_since_2010 <- success_since_2010 %>%\n  top_n(5, numSuccesses)\n```\n:::\n\n\n\n#### Plot the number of successes since 2010 :\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(top_genres_since_2010, aes(x = reorder(genres, -numSuccesses), y = numSuccesses, fill = genres)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Top 5 Genres by Number of Successes Since 2010\",\n       x = \"Genre\",\n       y = \"Number of Successes\",\n       fill = \"Genres\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_fill_brewer(palette = \"Paired\") \n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n**\"Drama\"** genre has been the most successful since 2010.\n\n#### Question 4: What genre has become more popular in recent years(including only top 5 genres) ?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrecent_genre_success <- movies_success %>%\n  filter(startYear >= 2000) %>%\n  group_by(startYear, genres) %>%\n  summarise(numSuccesses = sum(success >= 6), .groups = 'drop')\n\ntop_genres_overall <- movies_success %>%\n  group_by(genres) %>%\n  summarise(totalSuccesses = sum(success >= 6), .groups = 'drop') %>%\n  top_n(5, totalSuccesses)\n\nfiltered_recent_success <- recent_genre_success %>%\n  filter(genres %in% top_genres_overall$genres)\n\nggplot(filtered_recent_success, aes(x = startYear, y = numSuccesses, color = genres, group = genres)) +\n  geom_line(size = 1) +\n  labs(title = \"Top 5 Genre Popularity Trends Since 2000\",\n       x = \"Year\",\n       y = \"Number of Successes\",\n       color = \"Genres\") +\n  theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  scale_color_brewer(palette = \"Paired\")\n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n## Task 5: Key Personnel\n\nFor my Project Pitch, in am selecting the succesful duo **Jordan Peele & Keegan-Michael Key**, bringing together the dynamic, Emmy-winning duo that dominated the sketch comedy world with Key & Peele. Both have proven they can nail comedic timing and tackle socially relevant themes. They are familiar with each other's rhythm, which guarantees on-screen chemistry and laugh-out-loud moments. Jordan Peele is known for: \"Key & Peele\", \"Get Out\". He is a master of sketch comedy with an incredible ability to weave humor into smart commentary. While, Keegan-Michael Key is also known for \"Key & Peele\", \"The Lion King\", \"Friends from College\". His energetic style and ability to play a variety of roles make him versatile for any comic scenario.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(\n  project = c(\"Key & Peele\", \"Keanu\", \"The Substitute\", \"Toy Story 4\", \"Get Out (Peele Dir.)\"),\n  imdb_rating = c(8.3, 6.3, 7.8, 7.7, 7.7),\n  imdb_votes = c(50000, 55000, 2000, 240000, 700000)\n)\n```\n:::\n\n\n\n#### Plotting IMDb rating vs IMDb votes for Peele & Key projects\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data, aes(x = imdb_votes, y = imdb_rating, label = project)) +\n  geom_point(color = \"blue\", size = 4) +\n  geom_text(vjust = -1, hjust = 1, size = 3) +  \n  scale_x_log10() +\n  labs(\n    title = \"Peele & Key Projects: IMDb Ratings vs. Votes\",\n    x = \"IMDb Votes\",\n    y = \"IMDb Rating\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(hjust = 0.5), \n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 10)\n  )\n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n**Adam McKay** is the perfect choice to direct a comedy featuring *Jordan Peele* and *Keegan-Michael Key*. McKay boasts an impressive portfolio of both commercial hits and critically acclaimed films.From directing modern comedy classics like Anchorman, Step Brothers, and The Other Guys, to masterfully blending humor with incisive social commentary in The Big Short and Don’t Look Up, McKay's versatile talent is undeniable. His unique ability to mix humor with thought-provoking themes aligns perfectly with Peele and Key's comedic style. Furthermore, McKay’s track record of financial and critical success makes him a reliable choice for a commercially viable project.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmckay_data <- data.frame(\n  movie = c(\"Anchorman\", \"Step Brothers\", \"The Big Short\", \"Vice\", \"Don't Look Up\"),\n  imdb_rating = c(7.2, 6.9, 7.8, 7.2, 7.2),\n  imdb_votes = c(380000, 320000, 425000, 157000, 585000),\n  box_office = c(90, 128, 133, 76, 792)\n)\n```\n:::\n\n\n\n#### Plotting IMDb rating vs IMDb votes for McKay’s films:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(mckay_data, aes(x = imdb_votes, y = imdb_rating, label = movie)) +\n  geom_point(color = \"blue\", size = 4) +\n  geom_text(vjust = 1.5, hjust = 0.5) +\n  scale_x_log10() +\n  labs(title = \"Adam McKay's Comedy Success: IMDb Ratings vs. Votes\", x = \"IMDb Votes\", y = \"IMDb Rating\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](mp02_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\nThis graph highlights McKay's consistent ability to direct high-rating and high-vote comedy projects, making him a reliable choice for our comedy film starring Jordan Peele and Keegan-Michael Key to make this project a powerhouse in the comedy genre!\n\n## Task 6: Finding a Classic Movie to Remake\n\nFor our comedy project starring Jordan Peele and Keegan-Michael Key, directed by Adam McKay, we’ve chosen the 1979 classic \"The In-Laws\" for several reasons. First, the original has a 7.3/10 rating from over 15,000 votes, showing its popularity. The story follows two soon-to-be in-laws caught in a wild CIA adventure. Their chemistry is spot-on for Peele and Key as this film is a mix of humor, action, and character-driven comedy makes it a great candidate for a modern remake with our talented cast.\n\nAs for the original movie key actors, the Director Arthur Hiller, passed away in 2016). The actor Peter Falk who played the wacky CIA agent passed away in 2011. Also, Alan Arkin, who played straight-laced dentist passed away in 2023.\n\nA remake of \"The In-Laws\" with Jordan Peele, Keegan-Michael Key, and Adam McKay promises to be a fresh and hilarious take on respecting the classic while taking it to new comedic heights.\n\n## Task 7: Write and Deliver Your Pitch\n\n#### 2024 Remake \"The In-Laws\" \n\n![](ProjectImage.webp){fig-align=\"center\" width=\"435\"}\n\n\\[Image generated by AI.\\]\n\nGet ready for a comedy masterpiece! **Jordan Peele** and **Keegan-Michael Key** star in the ultimate modern remake of the 1979 classic **\"The In-Laws\"**, directed by the sharp and witty **Adam McKay**. This hilarious action-comedy combines laugh-out-loud moments with thrilling international escapades. Peele, as the straight-laced family man, and Key, as the wild CIA agent, showcase their signature comedic chemistry in this updated take on a beloved story.\n\nThe original The In-Laws scored a solid 7.3 IMDb rating and its blend of humor and action provides the perfect foundation for a fresh reboot. With Peele and Key’s proven comedy success and McKay’s expertise in blending satire and big action, this film is set to hit the mark both critically and commercially. McKay’s recent box office hits, like The Big Short and Don’t Look Up, show that audiences are craving smart, socially relevant comedy, making this the perfect project for our time.\n\nThis remake promises a hilarious, fast-paced adventure that will appeal to both fans of the original and new audiences alike. Get ready for outrageous family drama, CIA plots, and wild chases across the globe in The In-Laws—coming soon to theaters.\n",
    "supporting": [
      "mp02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}